#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Fri May  5 18:39:33 2017

@author: BrianzChang
"""

The key of Dynamic Programming is to find the recursion equation. With the equation, we can solve a bigger problem with sub-problems.

Exhaustive conditions:
                             root
                          /         \
                        0            1
                      /   \        /   \
                     0     1      0     1
                   / \   /  \   /  \   /  \ 
                  0  1   0  1   0  1   0   1

Apply the condition that robbing 2 consecutive houses are forbidenned:
                             root
                          /         \
                        0            1
                      /   \          / 
                     0     1       0 
                   / \    /       /  \   
                  0  1   0       0    1 

According to the observation, we can further reduce the tree to:
                             root
                          /         \
                        0            1
                          \          / 
                           1        0 
                          /       /  \   
                         0       0   1 
If we rob two more house, the tree will be like:
                             root
                          /         \
                        0            1
                        |            / 
                        1           0 
                        |         /    \   
                        0        0      1 
                      /   \      |      |
                     0     1     1      0
                     |     |     |     /  \
                     1     0     0    0    1
Observations:
    Ans(rob [1] house)   = $1
    Ans(rob [2] houses) = max($1, $2) = max(Ans(1), 0 + $2)
    Ans(rob [3] houses) = max($1, $2, $1+$3) = max(Ans(2), Ans(1)+$3)
    Ans(rob [4] houses) = max($1+$3, $1+$4, $2+$4)
                                  = max($1+$3, max($1+$4, $2+$4) )
                                  = max($1+$3, Ans(2) + $4)
                                  = max(Ans(3), Ans(2) + $4)

The recursion equations:
    Ans(1) = num[1]
    Ans(2) = max(num[1], num[2])
    Ans(k) = max(Ans(k-1), Ans(k-2) + num[k])


Solution after knowing the answers:
    Assume state of each house (robbed or not) is a bit string B_state
    For Ans(k), we know for sure that Ans(k-2) + num[k] is one candidate
    Then how do we deal with Ans(k-1)?
    At the first sight, it depends on B_state[k-1] 
    if B_state[k-1] == 0
        Ans(k) = Ans(k-1) + num[k]
    else
        Ans(k-1) is one candidate for Ans(k)

    However, if B_state[k-1] == 0 -> Ans(k-1) == Ans(k-2)
    In conclusion, Ans(k) = max( Ans(k-1), Ans(k-2) + num[k] )